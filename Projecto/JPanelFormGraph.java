/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ufp.inf.lp2.Projecto;

import edu.princeton.cs.algs4.DirectedEdge;
import java.awt.Graphics;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author joaoalves
 */
public class JPanelFormGraph extends javax.swing.JPanel {

    
    private Rede rede;
    
    
    /**
     * Creates new form JPanelFormGraph
     */
    public JPanelFormGraph() {
       
        this.rede=GUIcentimetro.centimetro;
        initComponents();
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(153, 255, 153));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 313, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.

        int w = super.getWidth();
        int h = super.getHeight();
        
        //calcular a posicao x e y de cada paragem na janela onde irao ser desenhadas.
        for (Paragem p : rede.paragens) {
            p.adaptLocationToCirculo(w - 50, h-20); // -10 to give space to the circle at the right higher and lower corner
        }
        // desenhar linhas/ligacoes de paragens
        for (int i = 0; i < rede.V(); i++) {
            for (DirectedEdge aux : rede.adj(i)) {
                Ligacao lig = (Ligacao) aux;
                lig.draw(g, rede.paragens.get(lig.from()), rede.paragens.get(lig.to()));
            }
        }
        // desenhar as paragens (circulos)
        for (Paragem p : rede.paragens) {
            try {
                p.draw(g);//desenha a paragem
                if(p.getCirculo().getPoint().getX()<w/2){ // escrever o nome de cada paraem ao lado do circulo.
                    g.drawString(p.getNome(),(int)p.getCirculo().getPoint().getX()+20, (int)p.getCirculo().getPoint().getY()+15);
                }else{
                    g.drawString(p.getNome(),(int)p.getCirculo().getPoint().getX(), (int)p.getCirculo().getPoint().getY());
                }
                } catch (PositionNotInitializedException ex) {
                    Logger.getLogger(JPanelFormGraph.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
